/**
 * @file modTableCipher.h
 * @author Грачев В.В.
 * @version 1.0
 * @brief Описание класса TableCipher
 * @date 18.11.2024
 */

#pragma once
#include <codecvt>
#include <stdexcept>
#include <string>

/** @brief Шифрование методом табличной маршрутной перестановки
 * @details Ключ устанавливается в конструкторе.
 * Для зашифровывания и расшифровывания предназначены методы encrypt и decrypt.
 * @warning Реализация только для русского языка
 */
/**
 * @class TableCipher
 * @brief Класс, реализующий табличный шифр.
 * Класс реализует шифр табличной маршрутной перестановки.
 *
 */
class TableCipher
{
private:
    int key; //!< Ключ для шифрования (Количество столбцов таблицы)
public:
    TableCipher() = delete; //!< Конструктор по умолчанию запрещен.

    /**
     * @brief Конструктор класса TableCipher.
     *
     * Создает объект TableCipher с заданным ключом. Ключ количество столбцов.
     *
     * @param key_str Строка, содержащая ключ шифра.
     */
    TableCipher(const std::wstring& key_str);

    /**
     * @brief Метод шифрования текста с помощью табличной маршрутной перестановки.
     *
     * Записывает текст в таблицу на основе полученного ключа и вычисленного значения количсества строк таблицы.
     * Маршрут записи: по горизонтали слева направо, сверху вниз.
     * Маршрут считывания: сверху вниз, справа налево.
     *
     * @param text Открытый текст для шифрования.
     * @return Зашифрованный текст.
     */
    std::wstring encrypt(const std::wstring& text);

    /**
     * @brief Расшифровывает текст, зашифрованный с помощью табличной маршрутной перестановки.
     * @param encrypted_text Текст для расшифровки.
     * @return Расшифрованный текст.
     */
    std::wstring decrypt(const std::wstring& encrypted_text);

    /**
     * @brief Валидация ключа.
     *
     * Функция проверяет, что строка ключа не пуста и содержит только цифры.  Если строка валидна,
     * она преобразуется в целое число. В случае ошибки выбрасывается исключение.
     *
     * @param key_str Строка, содержащая ключ.
     * @return Целое число, представляющее ключ.
     * @throw cipher_error Если ключ пустой, содержит нецифровые символы или key <= 0.
     */
    int getValidKey(const std::wstring& key_str);

    /**
     * @brief Валидация открытого текста.
     *
     * Функция обрабатывает входную строку, оставляя только буквы и пробелы. Буквы приводятся к строчному формату
     * Если после обработки строка пуста, выбрасывается исключение.
     *
     * @param s Входная строка открытого текста.
     * @return Очищенная строка, содержащая только буквы верхнего регистра и пробелы.
     * @throw cipher_error Если после обработки строка оказывается пустой.
     */
    std::wstring getValidOpenText(const std::wstring& s);

    /**
     * @brief Валидация зашифрованного текста.
     *
     * Функция проверяет, что строка не пуста и содержит только символы прописных букв и звездочки ('*').
     *
     * @param s Входная строка зашифрованного текста.
     * @return Строка зашифрованного текста, если она корректна.
     * @throw cipher_error Если строка пуста или содержит недопустимые символы.
     */
    std::wstring getValidCipherText(const std::wstring& s);
};

/**
 * @class cipher_error
 * @brief Исключение для ошибок в классе modAlphaCipher.
 */
class cipher_error : public std::invalid_argument
{
public:
    /**
     * @brief Конструктор исключения с сообщением об.
     * @param what_arg Сообщение об ошибке.
     */
    explicit cipher_error(const std::string& what_arg)
        : std::invalid_argument(what_arg)
    {
    }

    /**
     * @brief Конструктор исключения с сообщением об.
     * @param what_arg Сообщение об ошибке.
     */
    explicit cipher_error(const char* what_arg)
        : std::invalid_argument(what_arg)
    {
    }
};
